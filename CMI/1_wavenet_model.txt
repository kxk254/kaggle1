CustomModel(
  (wavenet1): WaveNet(
    (model): Sequential(
      (0): Wave_Block(
        (convs): ModuleList(
          (0): Conv1d(3, 32, kernel_size=(1,), stride=(1,))
          (1-12): 12 x Conv1d(32, 32, kernel_size=(1,), stride=(1,))
        )
        (filter_convs): ModuleList(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (4): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
          (5): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(32,), dilation=(32,))
          (6): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(64,), dilation=(64,))
          (7): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(128,), dilation=(128,))
          (8): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(256,), dilation=(256,))
          (9): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(512,), dilation=(512,))
          (10): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1024,), dilation=(1024,))
          (11): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(2048,), dilation=(2048,))
        )
        (gate_convs): ModuleList(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (4): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
          (5): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(32,), dilation=(32,))
          (6): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(64,), dilation=(64,))
          (7): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(128,), dilation=(128,))
          (8): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(256,), dilation=(256,))
          (9): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(512,), dilation=(512,))
          (10): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1024,), dilation=(1024,))
          (11): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(2048,), dilation=(2048,))
        )
      )
      (1): Wave_Block(
        (convs): ModuleList(
          (0): Conv1d(32, 64, kernel_size=(1,), stride=(1,))
          (1-8): 8 x Conv1d(64, 64, kernel_size=(1,), stride=(1,))
        )
        (filter_convs): ModuleList(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (4): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
          (5): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(32,), dilation=(32,))
          (6): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(64,), dilation=(64,))
          (7): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(128,), dilation=(128,))
        )
        (gate_convs): ModuleList(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (4): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
          (5): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(32,), dilation=(32,))
          (6): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(64,), dilation=(64,))
          (7): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(128,), dilation=(128,))
        )
      )
      (2): Wave_Block(
        (convs): ModuleList(
          (0): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
          (1-4): 4 x Conv1d(128, 128, kernel_size=(1,), stride=(1,))
        )
        (filter_convs): ModuleList(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
        )
        (gate_convs): ModuleList(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
        )
      )
      (3): Wave_Block(
        (convs): ModuleList(
          (0): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (1): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
        )
        (filter_convs): ModuleList(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        )
        (gate_convs): ModuleList(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        )
      )
    )
  )
  (wavenet2): WaveNet(
    (model): Sequential(
      (0): Wave_Block(
        (convs): ModuleList(
          (0): Conv1d(4, 32, kernel_size=(1,), stride=(1,))
          (1-12): 12 x Conv1d(32, 32, kernel_size=(1,), stride=(1,))
        )
        (filter_convs): ModuleList(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (4): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
          (5): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(32,), dilation=(32,))
          (6): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(64,), dilation=(64,))
          (7): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(128,), dilation=(128,))
          (8): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(256,), dilation=(256,))
          (9): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(512,), dilation=(512,))
          (10): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1024,), dilation=(1024,))
          (11): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(2048,), dilation=(2048,))
        )
        (gate_convs): ModuleList(
          (0): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (4): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
          (5): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(32,), dilation=(32,))
          (6): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(64,), dilation=(64,))
          (7): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(128,), dilation=(128,))
          (8): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(256,), dilation=(256,))
          (9): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(512,), dilation=(512,))
          (10): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(1024,), dilation=(1024,))
          (11): Conv1d(32, 32, kernel_size=(3,), stride=(1,), padding=(2048,), dilation=(2048,))
        )
      )
      (1): Wave_Block(
        (convs): ModuleList(
          (0): Conv1d(32, 64, kernel_size=(1,), stride=(1,))
          (1-8): 8 x Conv1d(64, 64, kernel_size=(1,), stride=(1,))
        )
        (filter_convs): ModuleList(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (4): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
          (5): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(32,), dilation=(32,))
          (6): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(64,), dilation=(64,))
          (7): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(128,), dilation=(128,))
        )
        (gate_convs): ModuleList(
          (0): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
          (4): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(16,), dilation=(16,))
          (5): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(32,), dilation=(32,))
          (6): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(64,), dilation=(64,))
          (7): Conv1d(64, 64, kernel_size=(3,), stride=(1,), padding=(128,), dilation=(128,))
        )
      )
      (2): Wave_Block(
        (convs): ModuleList(
          (0): Conv1d(64, 128, kernel_size=(1,), stride=(1,))
          (1-4): 4 x Conv1d(128, 128, kernel_size=(1,), stride=(1,))
        )
        (filter_convs): ModuleList(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
        )
        (gate_convs): ModuleList(
          (0): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(1,))
          (1): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(2,), dilation=(2,))
          (2): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(4,), dilation=(4,))
          (3): Conv1d(128, 128, kernel_size=(3,), stride=(1,), padding=(8,), dilation=(8,))
        )
      )
      (3): Wave_Block(
        (convs): ModuleList(
          (0): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
          (1): Conv1d(256, 256, kernel_size=(1,), stride=(1,))
        )
        (filter_convs): ModuleList(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        )
        (gate_convs): ModuleList(
          (0): Conv1d(256, 256, kernel_size=(3,), stride=(1,), padding=(1,))
        )
      )
    )
  )
  (global_avg_pooling): AdaptiveAvgPool1d(output_size=1)
  (head_1): Sequential(
    (0): Flatten(start_dim=1, end_dim=-1)
    (1): Linear(in_features=512, out_features=256, bias=True)
    (2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): ReLU()
    (4): Dropout(p=0.2, inplace=False)
    (5): Linear(in_features=256, out_features=9, bias=True)
  )
  (head_2): Sequential(
    (0): Flatten(start_dim=1, end_dim=-1)
    (1): Linear(in_features=512, out_features=256, bias=True)
    (2): BatchNorm1d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (3): ReLU()
    (4): Dropout(p=0.2, inplace=False)
    (5): Linear(in_features=256, out_features=1, bias=True)
  )
)